name: release

on:
  workflow_call:
    inputs:
      channel:
        type: string
        required: true

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Validate channel
        shell: pwsh
        env:
          channel: ${{ inputs.channel }}

        # The channel must be either canary, beta, or stable.
        # Canary releases must be on the `main` branch.
        # Beta and stable releases must be on a `release/*` branch.
        run: |
          $isPrerelease = $env:channel -ne "stable"

          if ($env:channel -eq "canary") {
            if ($env:GITHUB_REF -ne "refs/heads/main") {
              throw "Canary releases must be on the `main` branch."
            }
          } elseif ($env:channel -eq "beta" -or $env:channel -eq "stable") {
            # The branch name must start with "refs/heads/release/".
            $prefix = "refs/heads/release/"
            if ($env:GITHUB_REF.StartsWith($prefix) -eq $false) {
              throw "The branch name must start with `$prefix`."
            }
          } else {
            throw "The channel must be either canary, beta, or stable."
          }

          $isPrerelease = $isPrerelease.ToString().ToLower()
          echo "Is prerelease: $isPrerelease"
          "isPrerelease=${isPrerelease}" >> $env:GITHUB_ENV

      - name: Get the release version
        id: vars
        shell: pwsh
        env:
          channel: ${{ inputs.channel }}
        run: |
          $result = git describe --match v*
          $build = 0
          $version = ""
          $commit = $env:GITHUB_SHA.Substring(0, 7)

          # If result doesn't contain any hyphens, then the current commit is tagged.
          if ($result -eq $null) {
            throw "Could not find a tag."
          } elseif ($result.Contains("-") -eq $false) {
            $build = 0
            $version = $result
          } else {
            # Split the version and build number.
            $parts = $result.Split("-")

            $version = $parts[0]
            $version = $version.Substring(1)

            $build = $parts[1]
          }

          # Write the release to the environment in the format version.build-channel
          $release = $version + "." + $build + "-" + $env:channel + "." + $commit
          "release=${release}" >> $env:GITHUB_ENV

      - name: Print out the variables
        shell: pwsh
        run: |
          Write-Output "${{ env.release }}"
          Write-Output "${{ env.isPrerelease }}"

      - name: Create release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: ${{ env.isPrerelease }}
          title: "Release ${{ env.release }}"
          files: |
            bin/whim-install.exe
            CHANGELOG.md
