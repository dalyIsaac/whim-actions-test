name: release

on:
  push:
    branches:
      # Canary
      - main

      # Beta
      - release/v*
    tags:
      # Stable
      - v*

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine channel
        shell: pwsh
        # The channel must be either canary, beta, or stable.
        # Canary releases must be on the `main` branch.
        # Beta and stable releases must be on a `release/*` branch.
        run: |
          $channel = $null
          $isPrerelease = $true

          if ($env:GITHUB_REF -eq "refs/heads/main") {
            $channel = "canary"
          } elseif ($env:GITHUB_REF.StartsWith("refs/heads/release/")) {
            $channel = "beta"
          } elseif ($env:GITHUB_REF.StartsWith("refs/tags/v")) {
            $channel = "stable"
            $isPrerelease = $false
          } else {
            throw "Invalid branch or tag name."
          }

          $isPrerelease = $isPrerelease.ToString().ToLower()
          "channel=${channel}" >> $env:GITHUB_ENV
          "isPrerelease=${isPrerelease}" >> $env:GITHUB_ENV

      - name: Get the release version
        id: vars
        shell: pwsh
        run: |
          $result = git describe --match v*
          $build = 0
          $version = ""
          $commit = $env:GITHUB_SHA.Substring(0, 7)

          # If result doesn't contain any hyphens, then the current commit is tagged.
          if ($result -eq $null) {
            throw "Could not find a tag."
          } elseif ($result.Contains("-") -eq $false) {
            $build = 0
            $version = $result
          } else {
            # Split the version and build number.
            $parts = $result.Split("-")

            $version = $parts[0]
            $version = $version.Substring(1)

            $build = $parts[1]
          }

          # Write the release to the environment in the format version.build-channel
          $release = "v" + $version + "." + $build + "-" + $env:channel + "." + $commit
          "release=${release}" >> $env:GITHUB_ENV

      - name: Get the previous release for the channel
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $releases = gh release list
          $previousRelease = $null

          foreach ($line in $releases.Split("`n")) {
            $parts = $line.Split("`t")

            if ($parts.Length -lt 2) {
              continue
            }

            $r = $parts[2]
            if ($r.Contains($env:channel)) {
              $previousRelease = $r
              break
            }
          }

          "previousRelease=${previousRelease}" >> $env:GITHUB_ENV

      - name: Print out the variables
        shell: pwsh
        run: |
          Write-Output "Channel: $env:channel"
          Write-Output "Is prerelease: $env:isPrerelease"
          Write-Output "Release: $env:release"
          Write-Output "Previous release: $env:previousRelease"

      - name: Create release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $resp = gh api repos/$env:GITHUB_REPOSITORY/releases/generate-notes `
            -H "Accept: application/vnd.github.v3+json" `
            -f tag_name=$env:release `
            -f previous_tag_name=$env:previousRelease `
            | ConvertFrom-Json
            # TODO: Test that tag_name works with the PowerShell script.

          $resp # TODO: Remove
          $notes = $resp.body
          $notes # TODO: Remove

          ls # TODO: Remove
          ls bin

          gh release create "$env:release" bin/whim-install.exe `
            --title "Release $env:release" `
            # --prerelease $env:isPrerelease
            --notes $notes
