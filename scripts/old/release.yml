name: release

on:
  push:
    branches:
      - main
      - release/v*

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine channel
        shell: pwsh
        run: |
          $channel = $null

          if ($env:GITHUB_REF -eq "refs/heads/main") {
            $channel = "canary"
          } elseif ($env:GITHUB_REF.StartsWith("refs/heads/release/")) {
            $channel = "beta"
          } else {
            throw "Invalid branch or tag name."
          }

          "channel=${channel}" >> $env:GITHUB_ENV

      - name: Determine build number
        shell: pwsh
        run: |
          # TODO

      - name: Determine version
        shell: pwsh
        run: |
          $xml = [Xml] (Get-Content .\src\Whim.Runner\Whim.Runner.csproj)
          $version = [int] $xml.Project.PropertyGroup[0].Version

          "version=${version}" >> $env:GITHUB_ENV

      - name: Get the release version string
        id: vars
        shell: pwsh
        run: |
          $commit = $env:GITHUB_SHA.Substring(0, 7)

          # v<version>-<channel>.<build>.<commit>
          $release = "v" + $version + "-" + $env:channel + "." + $datetime + "." + $commit
          "release=${release}" >> $env:GITHUB_ENV

      - name: Get the previous release for the channel
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $releases = (gh release list) ?? ""
          $previousRelease = ""

          foreach ($line in $releases.Split("`n")) {
            $parts = $line.Split("`t")

            if ($parts.Length -lt 2) {
              continue
            }

            $r = $parts[2]
            if ($r.Contains($env:channel)) {
              $previousRelease = $r
              break
            }
          }

          "previousRelease=${previousRelease}" >> $env:GITHUB_ENV

      - name: Print out the variables
        shell: pwsh
        run: |
          Write-Output "Channel: $env:channel"
          Write-Output "Is prerelease: $env:isPrerelease"
          Write-Output "Release: $env:release"
          Write-Output "Previous release: $env:previousRelease"

      - name: Create release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $resp = gh api repos/$env:GITHUB_REPOSITORY/releases/generate-notes `
            -H "Accept: application/vnd.github.v3+json" `
            -f tag_name=$env:release `
            -f previous_tag_name=$env:previousRelease `
            | ConvertFrom-Json

          $notes = $resp.body ?? "Initial release"

          gh release create "$env:release" bin/whim-install.exe `
            --title "$env:release" `
            --prerelease="$env:isPrerelease" `
            --notes $notes
